version: "3"
services:
  api:
    container_name: api
    build: ./0x-tracker-api
    command: sh -c "sleep 30 && npm start"
    restart: on-failure
    ports:
      - "3001:3001"
    networks:
      - internal-network
      - external-network
  worker:
    container_name: worker
    build: ./0x-tracker-worker
    command: sh -c "sleep 30 && npm start / nodemon"
    restart: on-failure
    networks:
      - internal-network
      - external-network
  event-extractor:
    container_name: event-extractor
    build: ./0x-event-extractor
    command: sh -c "sleep 30 && yarn start / nodemon"
    restart: on-failure
    networks:
      - internal-network
      - external-network
  mongo:
    container_name: mongo
    image: mongo
    volumes:
    - mongo-data:/data/db
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    command: ["--replSet", "0x-tracker-events"]
    restart: on-failure
    networks:
      - internal-network
  redis:
    container_name: redis
    image: "redis:alpine"
    restart: on-failure
    volumes:
    - redis-data:/data
    networks:
      - internal-network
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    container_name: es01
    restart: on-failure
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data-01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - internal-network
networks:
  external-network:
    driver: bridge
  internal-network:
    driver: bridge
    internal: true
volumes:
  redis-data:
    driver: local
  es-data-01:
    driver: local
  mongo-data:
    driver: local
